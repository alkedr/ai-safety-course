---
description:
globs:
alwaysApply: true
---
- Inspect:
  - Reading source code:
    - Before making any changes or suggestions, read relevant parts of Inspect source code to understand how it works and how to use it.
    - The Inspect source code is in `venv/lib/python3.10/site-packages/inspect_ai/`.
  - Reading documentation:
    - Official docs: https://inspect.aisi.org.uk/ (can be accessed with `curl`).
    - Main chapters in the Inspect AI documentation:
      - Tutorial: ./tutorial.html
      - Tasks: ./tasks.html
      - Datasets: ./datasets.html
      - Solvers: ./solvers.html
      - Scorers: ./scorers.html
      - Tools: ./tools.html (with Custom Tools: ./tools-custom.html and Standard Tools: ./tools-standard.html)
      - Models: ./models.html
      - Providers: ./providers.html
      - Agents: ./agents.html (with Multi Agent: ./multi-agent.html, Custom Agents: ./agent-custom.html)
      - Sandboxing: ./sandboxing.html
      - Eval Logs: ./eval-logs.html
      - Eval Sets: ./eval-sets.html
      - Options: ./options.html
    - Use `inspect --help` for complete CLI details.
    - When stuck, check docs and `--help` first.
  - Reading eval logs:
    - Eval logs (`.eval` zip archives) can be examined using:
      - `inspect log dump [logfile.eval]` (full JSON dump)
      - `unzip -p [logfile.eval] samples/[...].json | python -m json.tool` (specific sample)
      - `grep` within extracted data.
  - Other:
    - Model names follow provider patterns (e.g., "anthropic/claude-3-5-sonnet-latest", "openai/gpt-4o-mini").
    - Use `--limit=N` for testing subsets of samples.
    - The command to run an evaluation is `inspect eval`, not `inspect run`.
    - The `inspect eval` command requires the `--model` argument.
    - The command to list tasks is `inspect list tasks [path]`.
    - Task identifiers use the format `path/to/file.py@task_function_name`.
- When modifying existing function behavior slightly, prioritize creating lightweight wrappers around the function or its inputs/outputs over reimplementing its logic.
- For proxying arguments, robustly use `*args` and `**kwargs` in both the wrapper's definition and its call to the wrapped function.
- Pay close attention to functions that return other callables, as this often enables direct and flexible composition.
- Ensure wrappers respect keyword-only arguments of the functions they call, often naturally handled if the wrapper itself uses `**kwargs` for pass-through and is called with keywords.
